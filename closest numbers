#include <bits/stdc++.h>
using namespace std;

int main() {
    int n;
    cin >> n;
    
    vector<long long> arr(n);  // Use long long to be safe, though int suffices
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }
    
    sort(arr.begin(), arr.end());  // Sort the array
    
    long long minDiff = LLONG_MAX;
    vector<pair<long long, long long>> pairs;
    
    // Find min diff and collect consecutive pairs (since non-consecutive can't be closer after sort)
    for (int i = 0; i < n - 1; i++) {
        long long diff = arr[i + 1] - arr[i];
        if (diff < minDiff) {
            minDiff = diff;
            pairs.clear();
            pairs.push_back({arr[i], arr[i + 1]});
        } else if (diff == minDiff) {
            pairs.push_back({arr[i], arr[i + 1]});
        }
    }
    
    // No need to sort pairs further: since array is sorted, pairs are already in ascending order of first element
    // (and if ties in first, second follows)
    
    // Output
    for (size_t i = 0; i < pairs.size(); i++) {
        if (i > 0) cout << " ";
        cout << pairs[i].first << " " << pairs[i].second;
    }
    cout << endl;
    
    return 0;
}
