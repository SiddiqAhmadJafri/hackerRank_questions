#include <iostream>
#include <vector>
#include <queue>
#include <algorithm>

const int MAX_N = 1000001;
std::vector<int> dp(MAX_N);

void precompute_min_moves() {
    dp[0] = 0;
    dp[1] = 1;

    // Initialize dp values for decrement operation
    for (int i = 2; i < MAX_N; ++i) {
        dp[i] = 1 + dp[i - 1]; // Option 1: Decrement
    }

    // Optimize with factorization
    for (int i = 2; i < MAX_N; ++i) {
        // Iterate through multiples of i
        for (long long j = 2; (long long)i * j < MAX_N; ++j) {
            int current_num = i * j;
            int largest_factor = std::max(i, (int)j); // max(A, B)
            dp[current_num] = std::min(dp[current_num], 1 + dp[largest_factor]);
        }
    }
}

int main() {
    std::ios_base::sync_with_stdio(false);
    std::cin.tie(NULL);

    precompute_min_moves();

    int Q;
    std::cin >> Q;
    while (Q--) {
        int N;
        std::cin >> N;
        std::cout << dp[N] << "\n";
    }
    return 0;
}
